{
  "hash": "e9c43afdf5df23f2b7de125685a9a262",
  "result": {
    "markdown": "---\ntitle: \"Sleep and Employment: Predicting Job Classification through Data Analytics\"\nimage: sleep.png\ncategories:\n  - Python\n  - Data Analysis\n  - Data Science\n  - Data Visualization\n  - Trend Analysis\n  - Machine Learning\n  - Random Forest Classification\n  - SVM Classifier\n---\n\n```{=html}\n<style>\nbody {\n  font-family: 'Times New Roman', sans-serif;\n  background-color: #f9f9f9;\n  color: #333;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  color: #999;\n}\n\nnav {\n  background: url(\"https://www.shutterstock.com/shutterstock/videos/1069623523/preview/stock-footage-melbourne-australia-mar-motorized-moving-shot-of-new-albums-released-in-spotify-app.mp4\") no-repeat top center fixed;\n  background-size: cover;\n  height: 20vh;\n  width: 100%;\n}\n\n.panel-tabset {\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  background-color: #fff;\n  padding: 15px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n\n.panel-tabset h3 {\n  margin-top: 0;\n}\n\n.panel-tabset .tab-content {\n  padding: 10px 0;\n}\n</style>\n```\n\n## Introduction\n\nThis study aims to predict job roles accurately by analyzing the relationship between sleep patterns, job classification, and other relevant factors. By utilizing sleep-related data and demographics in a model, the researchers seek to optimize workforce planning and develop personalized workplace strategies\n\n## Problem Statement\n\nThe research aims to improve human resource management strategies and personalized workplace interventions by accurately predicting job classifications through the analysis of sleep patterns and other health-related factors, exploring the relationship between sleep, stress, and job characteristics.\n\n## Research Questions\n\nTo what extent do sleep patterns, along with other factors, correlate with a person's job classification?\n\nHow accurately can a classification model predict a person's job based on their sleep patterns and other relevant factors?\n\n\n```{ipython}\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.decomposition import PCA\n\nprint(\"Libraries imported successfully!\")\n\nimport os\n\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\n\n# Check if the file exists\nif os.path.exists(file_path):\n    print(\"File exists, proceeding to load.\")\n    try:\n        sleep = pd.read_csv(file_path)\n        print(\"File loaded successfully.\")\n        print(sleep.head())  # Print the first few rows to confirm the data is loaded\n    except Exception as e:\n        print(f\"An error occurred while loading the file: {e}\")\nelse:\n    print(\"File does not exist, please check the file path.\")\n    \nsleep = pd.read_csv(file_path)\n\n```\n\n```{ipython}\nimport pandas as pd\nimport seaborn as sns\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\n\nsleep.info()\n\nsleep.describe()\n\n# Select some columns that might have a correlation\nnumerical_data = sleep[['Age', 'Sleep Duration','Quality of Sleep','Physical Activity Level', 'Stress Level','Heart Rate', 'Daily Steps']]\ncorrelation_matrix = numerical_data.corr()\n\n# Generate the heatmap and use a new color sheme\nax = sns.heatmap(correlation_matrix, annot=True, cmap=\"PuOr\");\nfig = ax.get_figure()\n```\n\n\n## Correlation of Numeric Variables\n\n\n```{ipython}\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\n\n# Select some columns that might have a correlation\nnumerical_data = sleep[['Age', 'Sleep Duration','Quality of Sleep','Physical Activity Level', 'Stress Level','Heart Rate', 'Daily Steps']]\ncorrelation_matrix = numerical_data.corr()\n\n# Generate the heatmap and use a new color sheme\nplt.figure(figsize=(10, 8))\nax = sns.heatmap(correlation_matrix, annot=True, cmap=\"PuOr\");\nfig = ax.get_figure()\n\nplt.title('Correlation Matrix of Selected Features')\nplt.show()\n```\n\n\n## Occupation By The Numbers\n\n\n```{ipython}\nimport pandas as pd\nimport seaborn as sns\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\nsleep.Occupation.unique()\n\nsleep.groupby('Occupation').agg(\n    num_occ=('Occupation', 'size')\n).reset_index()\n```\n\n```{ipython}\nimport pandas as pd\nimport seaborn as sns\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\ndef occupation_group(row):\n    if row[\"Occupation\"] in [\"Salesperson\", \"Sales Representative\", \"Manager\"]:\n        return \"Sales\"\n    elif row[\"Occupation\"] in [\"Software Engineer\", \"Scientist\", \"Accountant\"]:\n        return \"STEM\"\n    elif row[\"Occupation\"] in [\"Doctor\", \"Nurse\"]:\n        return \"Medical\"\n    else:\n        return row[\"Occupation\"]\n\nsleep[\"Occupation_Group\"] = sleep.apply(occupation_group, axis=1)\n```\n\n\n## Look at distribution based on Age\n\n\n```{ipython}\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\n\n# Look at the distribution based on Age\nfig, ax = plt.subplots(figsize=(10, 5))\nax.hist(sleep['Age'], bins=15)\nax.set_title('Distribution of Ages')\nax.set_xlabel('Age')\nax.set_ylabel('Frequency')\nplt.show()\n```\n\n\n## Stress Level\n\n\n```{ipython}\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\n\nsleep.groupby('Stress Level').agg(\n    num_individuals=('Stress Level', 'size')\n).reset_index()\n```\n\n\n## Sleep Duration\n\n\n```{ipython}\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\n\n# Look at the distribution based on Age\nfig, ax = plt.subplots(figsize=(10, 5))\nax.hist(sleep['Sleep Duration'], bins=20)\nax.set_title('Distribution of Sleep Duration')\nax.set_xlabel('Sleep Duration')\nax.set_ylabel('Frequency')\nplt.show()\n#Figure out who is 8.5?\n```\n\n\n## Quality of Sleep \n\n\n```{ipython}\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\n\nsleep.groupby('Quality of Sleep').agg(\n    num_individuals=('Quality of Sleep', 'size')\n).reset_index()\n```\n\n\n\n## Gender\n\n```{ipython}\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\n\nsleep.groupby('Gender').agg(\n    num_occ=('Gender', 'size')\n).reset_index()\n```\n\n```{ipython}\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\n\ngrouped_data = sleep.groupby(['Gender', 'Occupation']).size().reset_index(name='n')\n\n# Pivot the data to get 'Gender' as columns and 'Occupation' as index\npivot_data = grouped_data.pivot(index='Occupation', columns='Gender', values='n').fillna(0)\n\n# Rename the columns and reset the index\npivot_data.columns.name = None\npivot_data = pivot_data.reset_index()\n\npivot_data\n```\n\n```{ipython}\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\n\ngrouped_data = sleep.groupby(['Stress Level', 'Occupation']).size().reset_index(name='n')\n\n# Pivot the data to get 'Gender' as columns and 'Occupation' as index\npivot_data = grouped_data.pivot(index='Occupation', columns='Stress Level', values='n').fillna(0)\n\n# Rename the columns and reset the index\npivot_data.columns.name = None\npivot_data = pivot_data.reset_index()\n\npivot_data\n```\n\n```{ipython}\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\n# Pivot the data to get 'Gender' as columns and 'Occupation' as index\ngrouped_data = sleep.groupby(['Stress Level', 'Occupation']).size().reset_index(name='n')\npivot_data = grouped_data.pivot(index='Occupation', columns='Stress Level', values='n').fillna(0)\npivot_data.columns.name = None\npivot_data = pivot_data.reset_index()\n\npivot_data\n# Create the heatmap using seaborn\nsns.heatmap(pivot_data.set_index('Occupation'), annot=True, cmap='YlGnBu', fmt='g')\n\n# Set the title and labels\nplt.title(\"Stress Level vs Occupation Heatmap\")\nplt.xlabel(\"Stress Level\")\nplt.ylabel(\"Occupation\")\n\n# Display the heatmap\nplt.show()\n```\n\n```{ipython}\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\n# Pivot the data to get 'Gender' as columns and 'Occupation' as index\n\ngrouped_data = sleep.groupby(['Quality of Sleep', 'Stress Level']).size().reset_index(name='Total Counts')\n\n\n# Pivot the data to create a heatmap\npivot_data = grouped_data.pivot(index='Stress Level', columns='Quality of Sleep', values='Total Counts').fillna(0)\n\n# Create the heatmap using seaborn\nplt.figure(figsize=(10, 6))\nsns.heatmap(pivot_data, annot=True, cmap='YlGnBu', fmt='g')\nplt.xlabel('Quality of Sleep')\nplt.ylabel('Stress Level')\nplt.title('Heatmap of Quality of Sleep vs. Stress Level')\nplt.show()\n```\n\n\n## Machine Learning\n\n\n```{ipython}\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, ConfusionMatrixDisplay\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn.impute import SimpleImputer\n\n# Load the dataset\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\n\n# Separate features and target variable\nx = sleep.drop(columns=['Person ID', 'Sleep Disorder', 'Blood Pressure'])\ny = sleep['Sleep Disorder']\n\n# Inspect the data for NaNs\nprint(\"Checking for NaNs in the dataset:\")\nprint(x.isnull().sum())\n\n# Handle missing values\n# Impute numerical columns with mean\nnumerical_cols = x.select_dtypes(include=['float64', 'int64']).columns\nimputer_num = SimpleImputer(strategy='mean')\nx[numerical_cols] = imputer_num.fit_transform(x[numerical_cols])\n\n# Impute categorical columns with most frequent value\ncategorical_cols = ['Gender', 'Occupation', 'BMI Category', 'Stress Level']\nimputer_cat = SimpleImputer(strategy='most_frequent')\nx[categorical_cols] = imputer_cat.fit_transform(x[categorical_cols])\n\n# Recheck for any remaining NaN values\nprint(\"Rechecking for NaNs after imputation:\")\nprint(x.isnull().sum())\n\n# Encode categorical variables\nlabel_encoder = LabelEncoder()\nfor col in categorical_cols:\n    x[col] = label_encoder.fit_transform(x[col])\n\n# Ensure there are no NaNs before proceeding\nif x.isnull().values.any():\n    raise ValueError(\"Data still contains NaN values after handling missing data.\")\n\n# Split the data into training and testing sets\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\n# One-hot encode the categorical columns\nencoder = OneHotEncoder()\nx_train_encoded = encoder.fit_transform(x_train[categorical_cols])\nx_test_encoded = encoder.transform(x_test[categorical_cols])\n\n# Combine the one-hot encoded features with other numerical features\nx_train_final = np.hstack((x_train_encoded.toarray(), x_train.drop(columns=categorical_cols).values))\nx_test_final = np.hstack((x_test_encoded.toarray(), x_test.drop(columns=categorical_cols).values))\n\n# Fit the RandomForestClassifier and make predictions\nrf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\nrf_classifier.fit(x_train_final, y_train)\ny_pred = rf_classifier.predict(x_test_final)\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy of the random forest classifier:\", accuracy)\n\n# Display the confusion matrix\nConfusionMatrixDisplay.from_predictions(y_test, y_pred, labels=rf_classifier.classes_, display_labels=rf_classifier.classes_, cmap=\"YlGnBu\")\nplt.show()\n\n\n```\n\n\n## Random Forrest vs. SVM Classifier\n\n\n```{ipython}\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import ConfusionMatrixDisplay\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\n\n#Load the dataset\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\n\n# Assuming 'sleep' is your DataFrame\nx = sleep.drop(columns=['Person ID', 'Sleep Disorder', 'Blood Pressure'])\ny = sleep['Sleep Disorder']\n\nlabel_encoder = LabelEncoder()\ncategorical_cols = ['Gender', 'Occupation', 'BMI Category', 'Stress Level']\nfor col in categorical_cols:\n    x[col] = label_encoder.fit_transform(x[col])\n\n# One-hot encode the categorical columns (if needed)\nencoder = OneHotEncoder()\nx_encoded = encoder.fit_transform(x[categorical_cols])\nx_final = np.hstack((x_encoded.toarray(), x.drop(columns=categorical_cols).values))\n\nx_train, x_test, y_train, y_test = train_test_split(x_final, y, test_size=0.2, random_state=42)\n\n# RandomForestClassifier\nrf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\nrf_classifier.fit(x_train, y_train)\ny_pred_rf = rf_classifier.predict(x_test)\naccuracy_rf = accuracy_score(y_test, y_pred_rf)\n\n# SVM Classifier\nsvm_classifier = SVC(kernel='linear', random_state=42)\nsvm_classifier.fit(x_train, y_train)\ny_pred_svm = svm_classifier.predict(x_test)\naccuracy_svm = accuracy_score(y_test, y_pred_svm)\n\nprint(\"Accuracy of the random forest classifier:\", accuracy_rf)\nprint(\"Accuracy of the SVM classifier:\", accuracy_svm)\n\nConfusionMatrixDisplay.from_predictions(y_test, y_pred_svm, display_labels=svm_classifier.classes_, cmap=\"YlGnBu\")\nplt.show()\n\n```\n\n\n## Clustering\n\n\n```{ipython}\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Load the dataset\nfile_path = '/Users/Shared/Python/Sleep_health_and_lifestyle_dataset.csv'\nsleep = pd.read_csv(file_path)\n\n# Assuming 'sleep' is your DataFrame\n# Split 'Blood Pressure' into 'Systolic' and 'Diastolic'\nbp_split = sleep['Blood Pressure'].str.split('/', expand=True)\nsleep['Systolic'] = pd.to_numeric(bp_split[0], errors='coerce')\nsleep['Diastolic'] = pd.to_numeric(bp_split[1], errors='coerce')\n\n# Drop the original 'Blood Pressure' column\nx = sleep.drop(columns=['Person ID', 'Sleep Disorder', 'Gender', 'Blood Pressure'])\ny = sleep['Sleep Disorder']\n\n# Encode categorical variables\nlabel_encoder = LabelEncoder()\ncategorical_cols = ['Occupation', 'BMI Category', 'Stress Level']\nfor col in categorical_cols:\n    x[col] = label_encoder.fit_transform(x[col])\n\n# Normalize the data\nscaler = StandardScaler()\nx_scaled = scaler.fit_transform(x)\n\n# Perform K-means clustering\nkmeans = KMeans(n_clusters=3, random_state=42)\nkmeans_clusters = kmeans.fit_predict(x_scaled)\n\n# Visualize the clusters\nplt.scatter(x_scaled[:, 0], x_scaled[:, 1], c=kmeans_clusters, cmap='viridis', marker='o')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.title('K-means Clustering')\nplt.show()\n\n\n```\n\n\n## Summary\n\nThis study delved into the relationship between sleep patterns, job classification, and other relevant factors to accurately predict job roles. By leveraging data analytics and machine learning techniques, we aimed to optimize workforce planning and develop personalized workplace strategies.\n\nKey Insights\n\n1.**Correlation Analysis:** Identified significant correlations between sleep duration, stress levels, and job classifications.\n\n2.**Distribution Analysis:** Provided insights into the age and sleep duration distributions among different occupations.\n\n3.**Heatmaps** Highlighted the relationship between stress levels and sleep quality across various occupations.\n\n4.**Machine Learning Models:** Demonstrated that Random Forest and SVM classifiers could predict sleep disorders with high accuracy based on sleep-related data.\n\n5.**Clustering:** K-means clustering revealed distinct groups within the data, indicating potential subgroups with unique sleep and job characteristics.\n\n## Conclusions\n\n1.**Predictive Power:** Sleep patterns, stress levels, and demographic data can effectively predict job classifications.\n\n2.**Model Performance:** Random Forest classifiers showed promising accuracy, outperforming SVM in this context.\n\n3.**Workforce Planning:** These insights can inform HR strategies, promoting better sleep health and productivity among employees.\n\n4.**Future Research:** Further studies can explore additional factors such as dietary habits and mental health for a comprehensive analysis.\n\nThis comprehensive analysis underscores the critical role of sleep patterns in predicting job classifications, offering valuable insights for both researchers and HR professionals. By integrating these findings into workforce management strategies, organizations can foster a healthier, more productive work environment.\n\n",
    "supporting": [
      "Sleeping_files"
    ],
    "filters": [],
    "includes": {}
  }
}